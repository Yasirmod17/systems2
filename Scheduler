.Code
	SETALM	21	1
;;; Entry ID should not be 0. 0 for empty process
clock_int_handler:
	COPY	+temp_FramePointer	%FP
	COPY	+temp_StackPointer	%SP;save stack and frame pointer cos we need to input them to process table
				;;;Caller Subframe

	SUBUS 	%SP	%SP	8 ;create space for return address and preserve frame pointer
	
	COPY	*%SP	%FP	  ;preserve frame pointer
	ADDUS	%FP	%SP	4 ;point Frame pointer to return address
	CALL 	+Actual_function	*%FP ;call function saving return address
	ADDUS	%SP		%SP		4
	COPY	%FP		*+temp_FramePointer	;copy frame pointer in process table into frame pointer register
	ADDUS	%SP		%SP		8	;clear pfp and return address from stack
	COPY	%SP		*+temp_StackPointer
	SETALM	*+ALM1	1
	JUMPMD	*+IB_IP		2
Actual_function:
	COPY	%FP	%SP	;point frame pointer to middle of caller and callee frame
	SUBUS	%SP	%SP	4 ;make space for general register, go
	COPY 	*%SP	%G0	  ;push GO onto stack
	COPY	%G0	*+process_table
	BEQ	+EqualHandler	*%G0	*+processNum
	BNEQ	 +UnequalHandler	*%G0	*+processNum
UnequalHandler:	
	ADD	%G0	%G0	48
	BEQ	+EqualHandler	*%G0	*+processNum
	BNEQ	 +UnequalHandler	*%G0	*+processNum
EqualHandler:
	ADD	%G0	%G0	44
	COPY	 *%G0	*+temp_FramePointer
	SUB	%G0	%G0	4
	COPY	*%G0	*+temp_StackPointer
	SUB	%G0	%G0	4
	COPY	*%G0	%G5
	SUB	%G0	%G0	4
	COPY	*%G0	%G4
	SUB	%G0	%G0	4
	COPY	*%G0	%G3
	SUB	%G0	%G0	4
	COPY 	*%G0	%G2
	SUB	%G0	%G0	4
	COPY 	*%G0	%G1
	SUB	%G0	%G0	4
	COPY	*%G0	*%SP	;pick GO from top of stack
	SUB	%G0	%G0	4
	COPY	*%G0	*+IB_IP
	JUMP	*+nextProcess
nextProcess:
	ADD 	%G0	%G0	36
	BNEQ	+loadnewprocess  *%G0	0
	BEQ	+findnextprocess *%G0	0
loadnewprocess:
	COPY	+processNum	*%G0
	ADD	%G0	*%G0	44
	COPY	+temp_FramePointer	*%G0
	SUB	%G0	%G0	4
	COPY	+temp_StackPointer	*%G0
	SUB	%G0	%G0	4
	COPY	%G5	*%G0
	SUB	%G0	%G0	4
	COPY	%G4	*%G0
	SUB	%G0	%G0	4
	COPY	%G3	*%G0
	SUB	%G0	%G0	4
	COPY	%G2	*%G0
	SUB	%G0	%G0	4
	COPY	%G1	*%G0
	SUB	%G0	%G0	4
	COPY	*+temp2	%G0	;save G0 cos we'll need to refer to it for IP jump
	COPY	%G0	*%G0
	SUB	*+temp2	*+temp2	4
	COPY +IB_IP	*+temp2	;Set interrupt buffer to returnIP address 
	ADDUS %FP	%SP	8
	JUMP	*%FP 
findnextprocess:
	BEQ	reset_rom	*%G0		+rom_count
	ADD	%G0	%G0	48
	BNEQ	+loadnewprocess	*%G0	0
	JUMP	findnextprocess
reset_rom:
	COPY	%G0	*+process_table
	BNEQ	+loadnewprocess	*%G0	0
	JUMP	findnextprocess
